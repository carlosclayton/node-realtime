{"version":3,"sources":["../../src/SocketControllerExecutor.ts"],"names":[],"mappings":"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","file":"SocketControllerExecutor.js","sourcesContent":["import {MetadataBuilder} from \"./metadata-builder/MetadataBuilder\";\nimport {ActionMetadata} from \"./metadata/ActionMetadata\";\nimport {ClassTransformOptions, plainToClass, classToPlain} from \"class-transformer\";\nimport {ActionTypes} from \"./metadata/types/ActionTypes\";\nimport {ParamMetadata} from \"./metadata/ParamMetadata\";\nimport {ParameterParseJsonError} from \"./error/ParameterParseJsonError\";\nimport {ParamTypes} from \"./metadata/types/ParamTypes\";\nimport {ControllerMetadata} from \"./metadata/ControllerMetadata\";\n\n/**\n * Registers controllers and actions in the given server framework.\n */\nexport class SocketControllerExecutor {\n\n    // -------------------------------------------------------------------------\n    // Public properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if class-transformer package should be used to perform message body serialization / deserialization.\n     * By default its enabled.\n     */\n    useClassTransformer: boolean;\n\n    /**\n     * Global class transformer options passed to class-transformer during classToPlain operation.\n     * This operation is being executed when server returns response to user.\n     */\n    classToPlainTransformOptions: ClassTransformOptions;\n\n    /**\n     * Global class transformer options passed to class-transformer during plainToClass operation.\n     * This operation is being executed when parsing user parameters.\n     */\n    plainToClassTransformOptions: ClassTransformOptions;\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    private metadataBuilder: MetadataBuilder;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private io: any) {\n        this.metadataBuilder = new MetadataBuilder();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    execute() {\n        this.registerControllers();\n        this.registerMiddlewares();\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Registers middlewares.\n     */\n    private registerMiddlewares(classes?: Function[]): this {\n        const middlewares = this.metadataBuilder.buildMiddlewareMetadata(classes);\n\n        middlewares\n            .sort((middleware1, middleware2) => middleware1.priority - middleware2.priority)\n            .forEach(middleware => {\n                this.io.use((socket: any, next: (err?: any) => any) => {\n                    middleware.instance.use(socket, next);\n                });\n            });\n\n        return this;\n    }\n\n    /**\n     * Registers controllers.\n     */\n    private registerControllers(classes?: Function[]): this {\n        const controllers = this.metadataBuilder.buildControllerMetadata(classes);\n        const controllersWithoutNamespaces = controllers.filter(ctrl => !ctrl.namespace);\n        const controllersWithNamespaces = controllers.filter(ctrl => !!ctrl.namespace);\n\n        // register controllers without namespaces\n        this.io.on(\"connection\", (socket: any) => this.handleConnection(controllersWithoutNamespaces, socket));\n\n        // register controllers with namespaces\n        controllersWithNamespaces.forEach(controller => {\n            this.io.of(controller.namespace).on(\"connection\", (socket: any) => this.handleConnection([controller], socket));\n        });\n\n        return this;\n    }\n\n    private handleConnection(controllers: ControllerMetadata[], socket: any) {\n        controllers.forEach(controller => {\n            controller.actions.forEach(action => {\n                if (action.type === ActionTypes.CONNECT) {\n                    this.handleAction(action, { socket: socket })\n                        .then(result => this.handleSuccessResult(result, action, socket))\n                        .catch(error => this.handleFailResult(error, action, socket));\n\n                } else if (action.type === ActionTypes.DISCONNECT) {\n                    socket.on(\"disconnect\", () => {\n                        this.handleAction(action, { socket: socket })\n                            .then(result => this.handleSuccessResult(result, action, socket))\n                            .catch(error => this.handleFailResult(error, action, socket));\n                    });\n\n                } else if (action.type === ActionTypes.MESSAGE) {\n                    socket.on(action.name, (data: any) => {\n                        this.handleAction(action, { socket: socket, data: data })\n                            .then(result => this.handleSuccessResult(result, action, socket))\n                            .catch(error => this.handleFailResult(error, action, socket));\n                    });\n                }\n            });\n        });\n    }\n\n    private handleAction(action: ActionMetadata, options: { socket?: any, data?: any }): Promise<any> {\n        \n        // compute all parameters\n        const paramsPromises = action.params\n            .sort((param1, param2) => param1.index - param2.index)\n            .map(param => {\n                if (param.type === ParamTypes.CONNECTED_SOCKET) {\n                    return options.socket;\n\n                } else if (param.type === ParamTypes.SOCKET_IO) {\n                    return this.io;\n\n                } else if (param.type === ParamTypes.SOCKET_QUERY_PARAM) {\n                    return options.socket.handshake.query[param.value];\n\n                } else if (param.type === ParamTypes.SOCKET_ID) {\n                    return options.socket.id;\n\n                } else if (param.type === ParamTypes.SOCKET_REQUEST) {\n                    return options.socket.request;\n\n                } else if (param.type === ParamTypes.SOCKET_ROOMS) {\n                    return options.socket.rooms;\n\n                } else {\n                    return this.handleParam(param, options);\n                }\n            });\n\n        // after all parameters are computed\n        const paramsPromise = Promise.all(paramsPromises).catch(error => {\n            console.log(\"Error during computation params of the socket controller: \", error);\n            throw error;\n        });\n        return paramsPromise.then(params => {\n            return action.executeAction(params);\n        });\n    }\n\n    private handleParam(param: ParamMetadata, options: { socket?: any, data?: any }) {\n\n        let value = options.data;\n        if (value !== null && value !== undefined && value !== \"\")\n            value = this.handleParamFormat(value, param);\n\n        // if transform function is given for this param then apply it\n        if (param.transform)\n            value = param.transform(value, options.socket);\n\n        return value;\n    }\n\n    private handleParamFormat(value: any, param: ParamMetadata): any {\n        const format = param.reflectedType;\n        const formatName = format instanceof Function && format.name ? format.name : format instanceof String ? format : \"\";\n        switch (formatName.toLowerCase()) {\n            case \"number\":\n                return +value;\n\n            case \"string\":\n                return value;\n\n            case \"boolean\":\n                if (value === \"true\") {\n                    return true;\n\n                } else if (value === \"false\") {\n                    return false;\n                }\n                return !!value;\n\n            default:\n                const isObjectFormat = format instanceof Function || formatName.toLowerCase() === \"object\";\n                if (value && isObjectFormat)\n                    value = this.parseParamValue(value, param);\n        }\n        return value;\n    }\n\n    private parseParamValue(value: any, paramMetadata: ParamMetadata) {\n        try {\n            const parseValue = typeof value === \"string\" ? JSON.parse(value) : value;\n            if (paramMetadata.reflectedType !== Object && paramMetadata.reflectedType && this.useClassTransformer) {\n                const options = paramMetadata.classTransformOptions || this.plainToClassTransformOptions;\n                return plainToClass(paramMetadata.reflectedType, parseValue, options);\n            } else {\n                return parseValue;\n            }\n        } catch (er) {\n            throw new ParameterParseJsonError(value);\n        }\n    }\n\n    private handleSuccessResult(result: any, action: ActionMetadata, socket: any) {\n        if (result !== null && result !== undefined && action.emitOnSuccess) {\n            const transformOptions = action.emitOnSuccess.classTransformOptions || this.classToPlainTransformOptions;\n            let transformedResult = this.useClassTransformer && result instanceof Object ? classToPlain(result, transformOptions) : result;\n            socket.emit(action.emitOnSuccess.value, transformedResult);\n\n        } else if ((result === null || result === undefined) && action.emitOnSuccess && !action.skipEmitOnEmptyResult) {\n            socket.emit(action.emitOnSuccess.value);\n        }\n    }\n\n    private handleFailResult(result: any, action: ActionMetadata, socket: any) {\n        if (result !== null && result !== undefined && action.emitOnFail) {\n            const transformOptions = action.emitOnSuccess.classTransformOptions || this.classToPlainTransformOptions;\n            let transformedResult = this.useClassTransformer && result instanceof Object ? classToPlain(result, transformOptions) : result;\n            if (result instanceof Error && !Object.keys(transformedResult).length) {\n                transformedResult = result.toString();\n            }\n            socket.emit(action.emitOnFail.value, transformedResult);\n\n        } else if ((result === null || result === undefined) && action.emitOnFail && !action.skipEmitOnEmptyResult) {\n            socket.emit(action.emitOnFail.value);\n        }\n    }\n\n}"],"sourceRoot":"."}