import { ClassTransformOptions } from "class-transformer";
/**
 * Registers controllers and actions in the given server framework.
 */
export declare class SocketControllerExecutor {
    private io;
    /**
     * Indicates if class-transformer package should be used to perform message body serialization / deserialization.
     * By default its enabled.
     */
    useClassTransformer: boolean;
    /**
     * Global class transformer options passed to class-transformer during classToPlain operation.
     * This operation is being executed when server returns response to user.
     */
    classToPlainTransformOptions: ClassTransformOptions;
    /**
     * Global class transformer options passed to class-transformer during plainToClass operation.
     * This operation is being executed when parsing user parameters.
     */
    plainToClassTransformOptions: ClassTransformOptions;
    private metadataBuilder;
    constructor(io: any);
    execute(): void;
    /**
     * Registers middlewares.
     */
    private registerMiddlewares(classes?);
    /**
     * Registers controllers.
     */
    private registerControllers(classes?);
    private handleConnection(controllers, socket);
    private handleAction(action, options);
    private handleParam(param, options);
    private handleParamFormat(value, param);
    private parseParamValue(value, paramMetadata);
    private handleSuccessResult(result, action, socket);
    private handleFailResult(result, action, socket);
}
